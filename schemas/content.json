[
  {
    "title": "Syllabus",
    "short_title": "syllabus",
    "page_type": "syllabus",
    "sections": [
      {
        "title": "Academic Integrity",
        "title_lookup": "academic-integrity",
        "content": "\n<p>\n    CSE Department Academic Integrity Policy: <br/><a\n        href=\"https://engineering.buffalo.edu/computer-science-engineering/undergraduate/resources-for-current-students/academic-integrity-students.html\">\n    https://engineering.buffalo.edu/computer-science-engineering/undergraduate/resources-for-current-students/academic-integrity-students.html</a>\n</p>\n<p>\n    UB Academic Integrity Policy: <br/><a\n        href=\"https://catalog.buffalo.edu/policies/integrity.html\">\n    https://catalog.buffalo.edu/policies/integrity.html</a>\n</p>\n<p>\n\n    All submitted work must be of your own creation and you must not share your submission with anyone else. If\n    any submission is very similar to code that has been submitted by another student\n    or can be found online, it is in violation of this courses academic integrity policy and all students will\n    be penalized whether they were copying or sharing their code with other students so they can copy. If two\n    submissions are similar beyond what is likely if the students worked independently, then <b>both students are\n    in\n    violation</b> of the academic integrity policy.\n</p>\n<p>\n    All violations will result in:\n    \u000f</p>\n\n<div class=\"row\">\n    <div class=\"col-sm-4\">\n        <div class=\"text-center alert alert-danger\">\n            <h3 style=\"color:red\">An F in CSE115.</h3>\n        </div>\n    </div>\n    <div class=\"col-sm-8\"></div>\n</div>\n<p>\n    It is your responsibility to understand what constitutes an academic integrity violation. If you have\n    any question whether something you are doing is a violation or not, ask for\n    clarification <b>before receiving an F in the course</b>. I will not entertain excuses after you\n    have been caught.\n\n</p>\n<p>\n    Examples of acceptable behavior:\n</p>\n<ul>\n    <li>Discussing an assignment with your classmates and brainstorming abstract solutions, then writing\n        code independently.\n    </li>\n    <li>Discussing the Friday pre-lab with your classmates.\n    </li>\n    <li>Searching the Internet for supplementary material on the course topics.</li>\n    <li>Asking the teaching staff for clarification on a homework question.</li>\n</ul>\n\n<p>\n    Examples of <b>un</b>acceptable behavior:\n</p>\n<ul>\n    <li>Submitting code that you did not write.</li>\n    <li>Allowing another student to see your code for an assignment.</li>\n    <li>Collaborating with another student to write code together for an assignment.</li>\n    <li>Allowing another student to access your code. (Examples: Do not host your code in a public\n        repository. Allowing your roommate to access you laptop)\n    </li>\n    <li>Copying a large amount of code found on the Internet into your submission.</li>\n    <li>Attempting to access the grading code on AutoLab.</li>\n</ul>\n\n<p>\n    If you plan on cheating, plan on taking this course again.\n</p>\n\n"
      },
      {
        "title": "Grading",
        "title_lookup": "grading",
        "content": "\n<div class=\"alert alert-warning\">\n    There is no curve for this course. There will be no changes to the grading policies or grade cutoffs\n    throughout the semester.\n</div>\n\n<p>\n    There are 3 different different assignment types:\n</p>\n<ul>\n    <li>Problem Sets</li>\n    <li>Labs + Final Exam</li>\n    <li>Projects</li>\n</ul>\n\n<p>\n    Letter grades will be determined by the following requirements. All three requirements must be met to earn a grade.\n</p>\n\n<table class=\"table table-bordered table-skinny\" style=\"text-align:center\">\n    <tr class=\"active\">\n        <th><b>Letter Grade</b></th>\n        <th><b>Problem Set Level</b></th>\n        <th><b>Labs Complete</b></th>\n        <th><b>Project Objectives</b></th>\n    </tr>\n    <tr>\n        <td>A</td>\n        <td>15</td>\n        <td>12</td>\n        <td>15</td>\n    </tr>\n    <tr>\n        <td>A-</td>\n        <td>15</td>\n        <td>11</td>\n        <td>13</td>\n    </tr>\n    <tr>\n        <td>B+</td>\n        <td>14</td>\n        <td>10</td>\n        <td>12</td>\n    </tr>\n    <tr>\n        <td>B</td>\n        <td>14</td>\n        <td>9</td>\n        <td>9</td>\n    </tr>\n    <tr>\n        <td>B-</td>\n        <td>14</td>\n        <td>8</td>\n        <td>6</td>\n    </tr>\n    <tr>\n        <td>C+</td>\n        <td>13</td>\n        <td>7</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>C</td>\n        <td>13</td>\n        <td>6</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>C-</td>\n        <td>13</td>\n        <td>5</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>F</td>\n        <td colspan=\"3\">Did not meet all C- requirements</td>\n    </tr>\n</table>\n\n<hr/>\n<h4>Problem Sets</h4>\n\n<!--<p>-->\n    <!--Oh yes, there will be gamification!-->\n<!--</p>-->\n\n<p>\n    This course features a random problem set generator allowing you attempt as many coding problem sets as you'd like.\n    Each problem set contain 5 randomly generated coding questions. Complete problem sets to earn points and gain\n    levels. Each new level introduces new course concepts into the question pool.\n</p>\n\n<p>\n    There is no penalty for getting a question wrong. Just check out a new problem set and try again. Each problem set\n    can only be submitted once for credit, but can be resubmitted additional time for feedback allowing you to\n    understand your mistakes before checking out a problem set.\n</p>\n\n<p>\n    Problem sets may be submitted until: May 18th @ 11:59 pm\n</p>\n\n<hr/>\n<h4>Labs</h4>\n\n<div class=\"alert alert-warning\">\n    Lab attendance is required.\n</div>\n\n<p>\n    There are no labs during the first week of classes.\n</p>\n\n<p>\n    A new lab will be introduced each Friday in lecture for the first 12 weeks of the\n    semester. In your lab section you may attempt any lab has been introduced and labs can be repeated in later weeks.\n    There is no partial credit for labs, it is either completed or not and labs must be completed during your lab\n    section. If you don't complete a lab, you receive no credit, however you can attempt the same lab again in a\n    later week.\n</p>\n\n<p>\n    If you complete a lab early, you may attempt one additional lab in the same lab session. You may attempt a maximum\n    of 2 labs per session. This allows you to catch up on labs if you have to miss a session for any reason. In addition,\n    there is no new lab introduced for the last week of classes allowing another opportunity to make up past labs.\n</p>\n\n\n<hr/>\n\n<h4>Projects</h4>\n\n<p>\n    There are 3 mini-projects in this course each divided into 5 objectives. These objectives will be reveled\n    throughout the semester. After completing all 5 objective for a project you will have written a fairly large\n    piece of software with real-world functionality. Any student who can complete all\n    3 mini-projects will be well prepared for success in an age based on computers.\n</p>\n\n\n<hr/>\n\n\n<div><h4>Final Exam</h4></div>\n\n<p>\n    There will only be one exam in the semester and it is scheduled during finals week. This exam will provide an\n    opportunity earn 3 lab completions. Note that all lab completions are earned through timed assessment under the\n    watch of the course staff.\n</p>\n\n<hr/>\n\n\n"
      },
      {
        "title": "Contact Information",
        "title_lookup": "contact-information",
        "content": "\n<br/><br/>\nInstructor: Dr. Jesse Hartloff<br/>\nOffice: Davis 344<br/>\nOffice Hours: Tuesday 1:00 PM - 3:00 PM<br/>\nEmail: hartloff@buffalo.edu\n<br/>\n\n\n"
      },
      {
        "title": "Resources",
        "title_lookup": "resources",
        "content": "\n<b>There is no required textbook for this course.</b>\n<br/><br/>\nRecommended books:\n\u000f\n<ul>\n    <li><a href=\"https://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208\">Head First Java (less formal)</a>\n    </li>\n    <li><a href=\"https://www.amazon.com/Core-Java-I-Fundamentals-10th/dp/0134177304\">Core Java (more formal)</a></li>\n</ul>\n\n<br/>\n<p>How to clone a git repository in eclipse: </p>\n\n<div class=\"embed-responsive embed-responsive-16by9 thumbnail\"\n     style=\"background-image: url('https://img.youtube.com/vi/hiij77tpDM4/0.jpg');\"\n     onclick=\"loadVideo(this, 'hiij77tpDM4')\">\n</div>\n\n\n"
      },
      {
        "title": "Advice",
        "title_lookup": "advice",
        "content": "Advice from alumni to incoming STEM majors:\n\n<ul>\n    <li><a href=\"https://www.youtube.com/watch?v=C4koK59KoGY\">Yousef Jaber</a></li>\n    <li><a href=\"https://www.youtube.com/watch?v=zPlMe-1cPZI\">Isabelle Caneda</a> - Codette</li>\n    <li><a href=\"https://www.youtube.com/watch?v=-UaX_CdeD_k\">Evan Truesdell</a></li>\n    <li><a href=\"https://www.youtube.com/watch?v=eviTOeXtlkw\">Steven Park</a></li>\n    <li><a href=\"https://www.youtube.com/watch?v=giD_nxXA2S4\">Vincent Cheng</a></li>\n</ul>\n\n\n"
      },
      {
        "title": "University/Department Policies and Services",
        "content": "\n<ul>\n    <li>Counseling: <a href=\"http://www.buffalo.edu/studentlife/who-we-are/departments/counseling.html\">http://www.buffalo.edu/studentlife/who-we-are/departments/counseling.html</a>\n    </li>\n    <li>Accessibility: <a\n            href=\"http://www.buffalo.edu/studentlife/who-we-are/departments/accessibility.html\">http://www.buffalo.edu/studentlife/who-we-are/departments/accessibility.html</a>\n    </li>\n    <li>Grading: <a href=\"https://catalog.buffalo.edu/policies/explanation.html\">https://catalog.buffalo.edu/policies/explanation.html</a>\n    </li>\n</ul>\n\n"
      }
    ]
  },
  {
    "title": "Introduction",
    "short_title": "variables",
    "page_type": "lecture",
    "sections": [
      {
        "title": "Eclipse",
        "title_lookup": "eclipse",
        "content": "\n<p>\n    Before we start learning how to write code we'll need a program for editing and running our work. The program we\n    recommend for this course is Eclipse. The following steps will get you setup with Eclipse on your personal computer:\n</p>\n<ol>\n    <li>Download and install the JDK (Java Development Kit) (<a\n            href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>)\n    </li>\n    <ul>\n        <li>\n            Agree to the terms and conditions then select the download for your OS\n        </li>\n        <li>The JDK includes many many tools for developing java programs, though you won't using this directly and\n            there won't be anything to run after you install this. However, Eclipse will look for this installation and\n            won't work properly without it\n        </li>\n    </ul>\n    <li>Download and install Eclipse (<a\n            href=\"https://www.eclipse.org/downloads/\">https://www.eclipse.org/downloads/</a>)\n    </li>\n    <ul>\n        <li>The link should detect your OS, but verify that the download is for your OS before attempting to install\n        </li>\n        <li>Once installed you will be able to open eclipse and start coding</li>\n    </ul>\n    <li>Complete problem sets</li>\n    <ul>\n        <li>\n            Once you have Eclipse open, in the menu select \"File\" -> \"New\" -> \"Java Project\" to start a new project.\n            Note\n            that any code that is not contained in a project cannot be ran so do not open your problem set file\n            directly without adding it to a project. You may name the project whatever you'd like\n        </li>\n        <li>\n            * When creating your project, pay close attention to which folder on your file system contains the new\n            project\n        </li>\n        <li>\n            Now, save your problem set in the \"src\" folder inside your project folder\n        </li>\n        <li>Back in Eclipse, right click your project and click \"refresh\" so your problem set appears in the src folder\n            inside something called \"(default package)\" which was created for you. You are now ready to edit and test\n            your code\n        </li>\n        <li>\n            As you complete questions you are <strong>strongly</strong> encouraged to test your answers by calling them\n            from the main method. To run the main method, right click on your problem set in the left sidebar, click\n            \"Run As\" then \"Java Application\"\n        </li>\n        <li>\n            When you complete a problem set, submit your ProblemSet_xxxx_0000.java file on AutoLab\n        </li>\n    </ul>\n</ol>\n\n\n"
      },
      {
        "title": "Supplements",
        "title_lookup": "supplements",
        "content": "\n<a href=\"/static/115Slides/1-Variables.pptx\">Variables Concept Slides</a>\n\n\n"
      },
      {
        "title": "Variables",
        "title_lookup": "variables",
        "content": "\nIntroduction:\n<p>Computer programs manipulate data. Data is stored in a computer's\n    memory. A <span class=\"vocabulary\">variable</span> is a location in\n    the computer's memory that has a name.</p>\n\n<p>\n    In Java variables must be declared before they can be used.\n    A <span class=\"vocabulary\">declaration</span> gives a variable both a\n    <span class=\"deeper-dive\" data-concept=\"variables\" data-topic=\"name\"></span> and a\n    <span class=\"deeper-dive\" data-concept=\"variables\" data-topic=\"type\"></span>.\n    The <span class=\"vocabulary\">type</span> of a\n    variable says what kind of value will be stored in the variable.</p>\n\n\n<p>For example,\n<pre><code class=\"java\"> int myFirstVariable;\n</code></pre>\n\ndeclares a variable with\nname <span><code class=\"java\">myFirstVariable</code></span> and\ntype <span><code class=\"java\">int</code></span>.\n<span><code class=\"java\">int</code></span> denotes whole numbers, like 17, -3, and 0 (and many more!)</p>\n\n<p>The order is important: the type comes first, followed by the name of the variable. The semicolon ';' at the end of\n    the line marks the end if the declaration.</p>\n\n<p>An assignment is used to store a value in a variable. For example, to store the value 7 in the variable <span><code\n        class=\"java\">myFirstVariable</code></span> we write:\n<pre><code class=\"java\"> myFirstVariable = 7;</code></pre>\n</p>\n\n<p>The order is again important: we first write the name of the\n    variable, then the assignment operator ('='), followed by the value to\n    be stored in the variable. The semicolon marks the end of the\n    assignment. In the example above the declaration of the variable and\n    the assignment of a value to the variable are done in two separate\n    instructions.\n</p>\n\n<p>We can combine these two steps into one, which is sometimes a convenience:\n</p>\n\n<pre><code class=\"java\"> int myFirstVariable = 7;\n</code></pre>\n\n<p>\n    Both examples have the same result and follow these two steps:\n</p>\n<ol>\n    <li><span><code class=\"java\">int myFirstVariable</code></span> - Declare a variable named myFirstVariable of type\n        int\n    </li>\n    <li><span><code class=\"java\">myFirstVariable = 7</code></span> - Assign the value 7 to the variable named\n        myFirstVariable\n    </li>\n</ol>\n\n<br/>\nGeneral structure:\n<pre><code class=\"java\">\n    [type] [name];\n    [name] = [value];\n</code></pre>\n<pre><code class=\"java\">\n    [type] [name] = [value];\n</code></pre>\n<br/>\n\n<ul>\n    <li>A program can have many variables</li>\n    <li>Variables can be reassigned different values</li>\n</ul>\n<ul>\n    <li>Names can contain UPPERCASE and lowercase letter, digits and the underscore '_' character</li>\n    <li>Names cannot contain spaces</li>\n    <li>Names of variables start with a lowercase letter</li>\n    <li>Names of variables follow <span class=\"deeper-dive\" data-concept=\"names\"\n                                        data-topic=\"conventions-for-identifiers\"></span></li>\n</ul>\n\n<hr/>\n\n<p>Supplementary source:</p>\n<ul>\n    <li><a href=\"https://en.wikipedia.org/wiki/Variable_(computer_science)\">Wikipedia: Variables</a></li>\n</ul>\n\n<hr/>\n\n<h4>Variable Types</h4>\n\n<p>\n    Every variable in java must have a type. A variable can only stores values matching its type.\n</p>\n\n<dl>\n    <dt>int</dt>\n    <dd>Stores integer values (whole numbers). Can store values that are negative, positive, or 0.</dd>\n    <dt>double</dt>\n    <dd>Stores numbers with decimals (ex. 3.1415). Can store values that are negative, positive, or 0.0. Some precision\n        is lost so int is used if only whole numbers are needed.\n    </dd>\n    <dt>String</dt>\n    <dd>Stores text values. Text values must be provided in \"double quotes\" to be a string. For example, \"115\" is a\n        String, but 115\n        is an int).\n    </dd>\n    <dt>boolean</dt>\n    <dd>Can only be true or false. Will be used extensively for control flow.</dd>\n</dl>\n\n\n<p>There are many more types in java. We will stick with these 4 for now.</p>\n\n\n<pre><code class=\"java\">\n    int items = 3;\n    double price = 19.95;\n    String salesPitch = \"Buy one get two free! *additional charges may apply\";\n    boolean goodDeal = false;\n</code></pre>\n\n\n"
      },
      {
        "title": "Printing",
        "title_lookup": "printing",
        "content": "\n<ul>\n    <li>When you want to communicate with the human user</li>\n    <li>Can print any String to the console</li>\n    <li>Printing a variable will automatically convert a copy of its value to a String</li>\n</ul>\n\nSyntax:\n<pre><code class=\"java\">\n    System.out.print(\"Hello World!\");\n</code></pre>\n\n<p>\n    Will print <kbd>Hello World!</kbd> to the console.\n</p>\n\n<p>\n    Printing the value of a variable:\n</p>\n\n<pre><code class=\"java\">\n    String hello;\n    hello = \"Hello World!\";\n    System.out.print(hello);\n</code></pre>\n\n<p>\n    Same output as the previous example. However, the value being printed is retrieved from the variable named <code\n        class=\"java\">hello</code>.\n</p>\n\n<ul>\n    <li><code class=\"java\">System.out.print</code></li>\n    <li><code class=\"java\">System.out.println</code></li>\n</ul>\n\n<p>\n    <code class=\"java\">System.out.print</code></li> prints its argument to the console exactly as its written. The\n    following two examples produce exactly the same output:\n</p>\n\n<p>Using one <code class=\"java\">System.out.print</code> statement:\n</p>\n<pre><code class=\"java\">\n    System.out.print(\"Hello World!\");\n</code></pre>\n\n<p>Using two <code class=\"java\">System.out.print</code> statements:\n</p>\n<pre><code class=\"java\">\n    System.out.print(\"Hello Wo\");\n    System.out.print(\"rld!\");\n</code></pre>\n\n<p>\n    <code class=\"java\">System.out.println</code></li> prints its argument to the console just like <code class=\"java\">System.out.print</code>,\n    but it also prints a newline character to the console. This means that the next thing to be printed will appear at\n    the start of the next line.\n</p>\n\n<p>Using two <code class=\"java\">System.out.println</code> statements:\n</p>\n<pre><code class=\"java\">\n    System.out.print(\"Hello Wo\");\n    System.out.print(\"rld!\");\n</code></pre>\n<p>\n    produces two lines of output:\n</p>\n<p>\n    <kbd>Hello Wo<br>rld!</kbd>\n</p>\n\n\n"
      },
      {
        "title": "Comments",
        "title_lookup": "comments",
        "content": "\n\n<pre><code class=\"java\">\n    //\n</code></pre>\n<pre><code class=\"java\">\n    /**/\n</code></pre>\n\n<pre><code class=\"java\">\n    int age;\n\n    // This line will be ignored the computer (everything to the right of '//' on this line)\n    /*\n    Comments allow us to leave notes for each other in our code.\n    The computer will ignore all this text\n    */\n\n    age = 18;\n\n    // Comments are used to describe the code\n    // The following line displays the value of age to the user\n    System.out.println(age);\n</code></pre>\n\n\n"
      },
      {
        "title": "Expressions",
        "title_lookup": "expressions",
        "content": "\n<p>\n    An expressions is a portion of code that evaluates to a single value.\n</p>\n\n<pre><code class=\"java\">\n    int x = 7; // 7 is an expression, whose value is 7 (makes sense!)\n    int y = 5; // 5 is an expression, whose value is 5\n    int z = x + y; // x is an expression, whose value is whatever is stored in x (7 in this case)\n    // y is an expression, whose value is whatever is stored in y (5 in this case)\n    // x + y is an expression, whose value is the sum of the values of x and y\n    System.out.println(z); // z is an expression\n</code></pre>\n\n<p>\n    Output: <kbd>12</kbd>\n</p>\n\n<p>\n    In this example the expression <code>x + y</code> is an expression that is evaluated to a single value which is\n    stored in the int variable named z.\n</p>\n\n<hr/>\n\n<pre><code class=\"java\">\n    int x = 9;\n    int z;\n    z = (x - 3) * 7;\n    System.out.println(z);\n</code></pre>\n\n<p>\n    Output: <kbd>42</kbd>\n</p>\n\n<p>\n    Here <span><code class=\"java\">(x - 3) * 7</code></span> is also an expression since it\n    evaluates to a single value. Expressions can be use to combine any\n    number of values into a single value. When using int or double we\n    can perform arithmetic operations in the expressions, using\n    operators like + (addition), - (subtraction), and * (multiplication).\n</p>\n\n<p> The operator / denotes division, but division works a little\n    differently for int values than it does for double values. For int\n    values / computes the integer quotient. The corresponding remainder\n    can be computed using the % operator.\n<pre><code class=\"java\">\n    int a = 15;\n    int b = 6;\n    System.out.println(a / b);\n    System.out.println(a % b);\n</code></pre>\nThis will print the following:\n<pre>\n    2\n    3\n</pre>\nThis is correct because 2 * 6 + 3 is 15.</p>\n\n<p>For double values / computes the quotient (which may not be a whole number). For example,\n<pre><code class=\"java\">\n    double c = 15.0;\n    double d = 6.0;\n    System.out.println(c / d);\n</code></pre>\nThis will print:\n<pre>\n    2.5\n</pre>\nThis is correct because 2.0 * 6.0 is 15.0\n</p>\n\n<br/>\n\n<p>\n    To evaluate <code>z = (x - 3) * 7;</code> the following steps are executed by the computer.\n</p>\n<ol>\n    <li><code>z = (x - 3) * 7;</code> Replace all variable names with their stored values</li>\n    <li><code>z = (9 - 3) * 7;</code> Evaluate the sub-expression inside the parenthesis first</li>\n    <li><code>z = 6 * 7;</code> Finish evaluating the expression on the right side of the equal sign</li>\n    <li><code>z = 42;</code> Store the single resulting value in the variable named z</li>\n    <li><code>42;</code> The assignment of z is also an expression as it returns the value being stored</li>\n    <li>Execution is complete and the program moves to the next line of code</li>\n</ol>\n\n<ul>\n    <li>Expressions evaluate to a single value</li>\n    <li>Since expressions evaluate to a single value, they can be used wherever a value can be used</li>\n</ul>\n\n\n<hr/>\n\n<p>Supplementary sources:</p>\n<ul>\n    <li><a href=\"https://en.wikipedia.org/wiki/Expression_(computer_science)\">Wikipedia: Expression</a></li>\n    <li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html\">Javadocs: Expressions,\n        Statements, and Blocks</a></li>\n</ul>\n\n"
      },
      {
        "title": "String Concatenation",
        "title_lookup": "string-concatenation",
        "content": "\n<p>\n    String Concatenation (combination) is an expression that combines multiple String values using the + operator.\n</p>\n\n<pre><code class=\"java\">\n    System.out.println(\"hello \" + \"world\");\n</code></pre>\n\n<p>\n    Output: <kbd>hello world</kbd>\n</p>\n\n<hr/>\n\n<pre><code class=\"java\">\n    String example = \"hello\";\n    String result;\n    result = example + \" \" + \"world\";\n    System.out.println(result);\n</code></pre>\n\n<p>\n    Output: <kbd>hello world</kbd>\n</p>\n\n<p>\n    We combined 3 separate String values into a single String value and stored it in a variable called result. The value\n    \"hello\" was recovered from the variable named example and concatenated with the values \" \" and \"world\" to create the\n    String value \"hello world\" which is the value stored in result.\n</p>\n\n<ol>\n    <li><span><code class=\"java\">result = example + \" \" + \"world\";</code></span> Replace all variable names with their\n        stored values\n    </li>\n    <li><span><code class=\"java\">result = \"hello\" + \" \" + \"world\";</code></span> Evaluate each concatenation from left\n        to right\n    </li>\n    <li><span><code class=\"java\">result = \"hello \" + \"world\";</code></span></li>\n    <li><span><code class=\"java\">result = \"hello world\";</code></span> Store the single resulting value in the variable\n        named result\n    </li>\n    <li><span><code class=\"java\">\"hello world\";</code></span> The assignment of result is also an expression as it\n        returns the value being stored\n    </li>\n    <li>Execution is complete and the program moves to the next line of code</li>\n</ol>\n\n"
      },
      {
        "title": "Program Structure",
        "content": "\n\n<pre><code class=\"java\">\npublic class LectureExample{\n\n    public static void q1(){\n        String message = \"I was called from main\";\n        System.out.println(\"Message from q1: \" + message);\n    }\n\n    public static int q2(int x){\n        return x+2;\n    }\n\n    public static void main(String[] args){\n        q1();\n        int y = q2(5);\n        System.out.println(y);\n    }\n\n}\n</code></pre>\n\n<p>\n    Output: <br/><kbd>Message from q1: I was called from main<br/>7</kbd>\n</p>\n\n<p>\n    When the above program is ran execution starts with the code inside main. There is only one line of code in main\n    which tells the computer to run the code in Q1 which print a message to the screen. Once the code is Q1 is\n    executed, the computer returned to main to look for more code to run. It instead finds the end of main and\n    program stops.\n</p>\n\n\n\n"
      }
    ]
  }
]